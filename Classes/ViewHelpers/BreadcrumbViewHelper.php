<?php
declare(strict_types = 1);

namespace Brotkrueml\Schema\ViewHelpers;

/**
 * This file is part of the "schema" extension for TYPO3 CMS.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 */
use Brotkrueml\Schema\Core\Model\AbstractType;
use Brotkrueml\Schema\Manager\SchemaManager;
use Brotkrueml\Schema\Model\Type\BreadcrumbList;
use Brotkrueml\Schema\Model\Type\ListItem;
use Brotkrueml\Schema\Model\Type\WebPage;
use Brotkrueml\Schema\Utility\Utility;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface;
use TYPO3Fluid\Fluid\Core\ViewHelper;

class BreadcrumbViewHelper extends ViewHelper\AbstractViewHelper
{
    protected const ARGUMENT_BREADCRUMB = 'breadcrumb';
    protected const ARGUMENT_RENDER_FIRST_ITEM = 'renderFirstItem';

    public function initializeArguments()
    {
        parent::initializeArguments();

        $this->registerArgument(
            static::ARGUMENT_BREADCRUMB,
            'array',
            'The breadcrumb generated by the MenuProcessor or an equivalent data structure',
            true
        );

        $this->registerArgument(
            static::ARGUMENT_RENDER_FIRST_ITEM,
            'bool',
            'Take the first item into the breadcrumb, normally this is the home page which is omitted',
            false,
            false
        );
    }

    public static function renderStatic(
        array $arguments,
        \Closure $renderChildrenClosure,
        RenderingContextInterface $renderingContext
    ) {
        if ($arguments[static::ARGUMENT_RENDER_FIRST_ITEM] === false) {
            \array_shift($arguments[static::ARGUMENT_BREADCRUMB]);
        }

        if (empty($arguments[static::ARGUMENT_BREADCRUMB])) {
            return;
        }

        static::checkBreadcrumbStructure($arguments[static::ARGUMENT_BREADCRUMB]);

        $siteUrl = GeneralUtility::getIndpEnv('TYPO3_SITE_URL');

        $breadcrumbList = (new BreadcrumbList());
        for ($i = 0; $i < count($arguments[static::ARGUMENT_BREADCRUMB]); $i++) {
            $itemTypeClass = WebPage::class;
            if (isset($arguments[static::ARGUMENT_BREADCRUMB][$i]['data']) && isset($arguments[static::ARGUMENT_BREADCRUMB][$i]['data']['tx_schema_webpagetype'])) {
                $givenItemTypeClass = Utility::getNamespacedClassNameForType($arguments[static::ARGUMENT_BREADCRUMB][$i]['data']['tx_schema_webpagetype']);
                $itemTypeClass = $givenItemTypeClass ?: $itemTypeClass;
            }

            /** @var AbstractType $itemType */
            $itemType = new $itemTypeClass();
            $itemType->setId($siteUrl . ltrim($arguments[static::ARGUMENT_BREADCRUMB][$i]['link'], '/'));

            $item = (new ListItem())
                ->setProperty('position', $i + 1)
                ->setProperty('name', $arguments[static::ARGUMENT_BREADCRUMB][$i]['title'])
                ->setProperty('item', $itemType);

            $breadcrumbList->addProperty('itemListElement', $item);
        }

        $schemaManager = GeneralUtility::makeInstance(SchemaManager::class);
        $schemaManager->addType($breadcrumbList);
    }

    protected static function checkBreadcrumbStructure($breadcrumb)
    {
        foreach ($breadcrumb as $item) {
            if (!isset($item['title'])) {
                throw new ViewHelper\Exception(
                    'An item in the given breadcrumb structure does not have the "title" key.',
                    1561890280
                );
            }

            if (!isset($item['link'])) {
                throw new ViewHelper\Exception(
                    'An item in the given breadcrumb structure does not have the "link" key.',
                    1561890281
                );
            }
        }
    }
}
